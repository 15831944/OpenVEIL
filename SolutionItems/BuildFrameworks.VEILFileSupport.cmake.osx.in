#	Copyright (c) 2018, TecSec, Inc.
#
#	Redistribution and use in source and binary forms, with or without
#	modification, are permitted provided that the following conditions are met:
#	
#		* Redistributions of source code must retain the above copyright
#		  notice, this list of conditions and the following disclaimer.
#		* Redistributions in binary form must reproduce the above copyright
#		  notice, this list of conditions and the following disclaimer in the
#		  documentation and/or other materials provided with the distribution.
#		* Neither the name of TecSec nor the names of the contributors may be
#		  used to endorse or promote products derived from this software 
#		  without specific prior written permission.
#		 
#	ALTERNATIVELY, provided that this notice is retained in full, this product
#	may be distributed under the terms of the GNU General Public License (GPL),
#	in which case the provisions of the GPL apply INSTEAD OF those given above.
#		 
#	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
#	ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#	DISCLAIMED.  IN NO EVENT SHALL TECSEC BE LIABLE FOR ANY 
#	DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#	LOSS OF USE, DATA OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#	ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Written by Roger Butler

set(SOURCE_DIR @CMAKE_SOURCE_DIR@)
set(VEIL_MAJOR_VERSION @VEIL_MAJOR_VERSION@)
set(VEIL_MINOR_VERSION @VEIL_MINOR_VERSION@)
set(VEIL_REVISION_VERSION @VEIL_REVISION_VERSION@)
set(VEIL_BUILD_VERSION @VEIL_BUILD_VERSION@)
set(OSX_FRAMEWORK_VERSION @OSX_FRAMEWORK_VERSION@)
set(CMAKE_BUILD_TYPE @CMAKE_BUILD_TYPE@)
set(DSO_POSTFIX )
if (${CMAKE_BUILD_TYPE} STREQUAL "Debug")
    set(DSO_POSTFIX _d)
endif()

set(SDK_FOLDER @SDK_FOLDER@)
set(TOOLS_FOLDER @TOOLS_FOLDER@)

set(VEIL_COPYRIGHT "@VEIL_COPYRIGHT@")

set(VEIL_VERSION @VEIL_VERSION@)
set(VEIL_VERSION_COMMA @VEIL_VERSION_COMMA@)
set(VEIL_SO_VERSION @VEIL_SO_VERSION@)

SET(CMAKE_SKIP_BUILD_RPATH FALSE)
SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
SET(CMAKE_INSTALL_RPATH "$ORIGIN")
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH FALSE)

cmake_minimum_required(VERSION 3.1.3)

function(CopyFilelist source dest)
    foreach(_file ${${source}})
        GET_FILENAME_COMPONENT(__destFile ${_file} NAME)
        execute_process(
            COMMAND 
                ${CMAKE_COMMAND} -E copy_if_different ${_file} ${dest}/${__destFile}
        )
    endforeach()
endfunction()

set(OVHeaders @SOURCE_DIR@/include/VEILFileSupport.h)

execute_process(
    COMMAND 
        ${CMAKE_COMMAND} -E remove_directory @CMAKE_CURRENT_BINARY_DIR@/out/VEILFileSupport${DSO_POSTFIX}.framework
)
execute_process(
    COMMAND 
        ${CMAKE_COMMAND} -E remove_directory @CMAKE_CURRENT_BINARY_DIR@/out/sdk/VEILFileSupport${DSO_POSTFIX}.framework
)



execute_process(
    COMMAND 
        ${CMAKE_COMMAND} -E make_directory @CMAKE_CURRENT_BINARY_DIR@/out/VEILFileSupport${DSO_POSTFIX}.framework
)
execute_process(
    COMMAND 
        ${CMAKE_COMMAND} -E make_directory @CMAKE_CURRENT_BINARY_DIR@/out/sdk/VEILFileSupport${DSO_POSTFIX}.framework
)



# Create VEILFileSupport framework
execute_process(
    COMMAND 
        cp -a @CMAKE_CURRENT_BINARY_DIR@/bin/VEILFileSupport${DSO_POSTFIX}.framework @CMAKE_CURRENT_BINARY_DIR@/out
)


# Add the VEILApiVersion.cmake file
execute_process(
    COMMAND 
        cp @CMAKE_CURRENT_BINARY_DIR@/VEILApiVersion.cmake @CMAKE_CURRENT_BINARY_DIR@/out/VEILFileSupport${DSO_POSTFIX}.framework/Versions/${OSX_FRAMEWORK_VERSION}/
)
execute_process(
    COMMAND 
        ${CMAKE_COMMAND} -E create_symlink Versions/Current/VEILApiVersion.cmake @CMAKE_CURRENT_BINARY_DIR@/out/VEILFileSupport${DSO_POSTFIX}.framework/VEILApiVersion.cmake
)


# create VEILFileSupport SDK framework
execute_process(
    COMMAND 
        cp -a @CMAKE_CURRENT_BINARY_DIR@/bin/VEILFileSupport${DSO_POSTFIX}.framework @CMAKE_CURRENT_BINARY_DIR@/out/sdk
)


# Add the VEILApiVersion.cmake file
execute_process(
    COMMAND 
        cp @CMAKE_CURRENT_BINARY_DIR@/VEILApiVersion.cmake @CMAKE_CURRENT_BINARY_DIR@/out/sdk/VEILFileSupport${DSO_POSTFIX}.framework/Versions/${OSX_FRAMEWORK_VERSION}/
)
execute_process(
    COMMAND 
        ${CMAKE_COMMAND} -E create_symlink Versions/Current/VEILApiVersion.cmake @CMAKE_CURRENT_BINARY_DIR@/out/sdk/VEILFileSupport${DSO_POSTFIX}.framework/VEILApiVersion.cmake
)


#
execute_process(
    COMMAND 
        ${CMAKE_COMMAND} -E make_directory @CMAKE_CURRENT_BINARY_DIR@/out/sdk/VEILFileSupport${DSO_POSTFIX}.framework/Versions/${OSX_FRAMEWORK_VERSION}/Headers
)
execute_process(
    COMMAND 
        ${CMAKE_COMMAND} -E create_symlink Versions/Current/Headers @CMAKE_CURRENT_BINARY_DIR@/out/sdk/VEILFileSupport${DSO_POSTFIX}.framework/Headers
)

# now process the headers
CopyFilelist(OVHeaders @CMAKE_CURRENT_BINARY_DIR@/out/sdk/VEILFileSupport${DSO_POSTFIX}.framework/Versions/${OSX_FRAMEWORK_VERSION}/Headers)


# Now create the installers
execute_process(
    COMMAND
        epm -f osx VEILFileSupport ../bin/VEILFileSupport.list
    WORKING_DIRECTORY
        ../out
)
execute_process(
    COMMAND
        epm -f osx VEILFileSupportSDK ../bin/VEILFileSupportSDK.list 
    WORKING_DIRECTORY
        ../out
)
