//	Copyright (c) 2016, TecSec, Inc.
//
//	Redistribution and use in source and binary forms, with or without
//	modification, are permitted provided that the following conditions are met:
//	
//		* Redistributions of source code must retain the above copyright
//		  notice, this list of conditions and the following disclaimer.
//		* Redistributions in binary form must reproduce the above copyright
//		  notice, this list of conditions and the following disclaimer in the
//		  documentation and/or other materials provided with the distribution.
//		* Neither the name of TecSec nor the names of the contributors may be
//		  used to endorse or promote products derived from this software 
//		  without specific prior written permission.
//		 
//	ALTERNATIVELY, provided that this notice is retained in full, this product
//	may be distributed under the terms of the GNU General Public License (GPL),
//	in which case the provisions of the GPL apply INSTEAD OF those given above.
//		 
//	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
//	ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//	DISCLAIMED.  IN NO EVENT SHALL TECSEC BE LIABLE FOR ANY 
//	DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//	LOSS OF USE, DATA OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//	ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Written by Roger Butler

//////////////////////////////////////////////////////////////////////////////////
/// \file CkmFileWriter.h
/// \brief Contains the implementation of the CKM File Writer.
//////////////////////////////////////////////////////////////////////////////////

#ifndef __CKMFILEWRITER_H__
#define __CKMFILEWRITER_H__

#pragma once

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>Creates a CkmFileWriter object instance.</summary>
///
/// <param name="filename">Filename of the file.</param>
/// <param name="pVal">	   [in,out] The CkmFileWriter object.</param>
///
/// <returns>S_OK for success or a standard COM error code for failure.</returns>
////////////////////////////////////////////////////////////////////////////////////////////////////
VEILCORE_API std::shared_ptr<IDataIOBase> CreateDataWriter(const tscrypto::tsCryptoString& filename);

class tsStreamWriter;

/// <summary>A specialized structure used in the stream operators to call a function with one parameter</summary>
template<class _Arg>
struct _TSStreamWritermanip
{	// store function pointer and argument value
	_TSStreamWritermanip(tsStreamWriter& (tsStreamWriter::*_Left)(_Arg), _Arg _Val)
		: _Pfun(_Left), _Manarg(_Val)
	{	// construct from function pointer and argument value
	}

	tsStreamWriter& (tsStreamWriter::*_Pfun)(_Arg);	// the function pointer
	_Arg _Manarg;	// the argument value
};

/// <summary>The core class used to create Trace logs</summary>
class VEILCORE_API tsStreamWriter
{
public:
	/**
	* \brief Constructor.
	*
	* \param name  true to link to master loggers.
	* \param level The Trace level for this stream.
	*/
	tsStreamWriter(std::shared_ptr<IDataWriter> writer);
	/// <summary>Destructor.</summary>
	~tsStreamWriter(void);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Stream insertion operator.</summary>
	///
	/// <param name="value">The value.</param>
	///
	/// <returns>A reference to this object.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	tsStreamWriter &operator<< (const tscrypto::tsCryptoString &value);
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Stream insertion operator.</summary>
	///
	/// <param name="value">The value.</param>
	///
	/// <returns>A reference to this object.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	tsStreamWriter &operator<< (int16_t value);
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Stream insertion operator.</summary>
	///
	/// <param name="value">The value.</param>
	///
	/// <returns>A reference to this object.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	tsStreamWriter &operator<< (uint16_t value);
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Stream insertion operator.</summary>
	///
	/// <param name="value">The value.</param>
	///
	/// <returns>A reference to this object.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	tsStreamWriter &operator<< (uint8_t value);
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Stream insertion operator.</summary>
	///
	/// <param name="value">The value.</param>
	///
	/// <returns>A reference to this object.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	tsStreamWriter &operator<< (int32_t value);
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Stream insertion operator.</summary>
	///
	/// <param name="value">The value.</param>
	///
	/// <returns>A reference to this object.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	tsStreamWriter &operator<< (uint32_t value);
#ifdef _WIN32
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Stream insertion operator.</summary>
	///
	/// <param name="value">The value.</param>
	///
	/// <returns>A reference to this object.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	tsStreamWriter &operator<< (long value);
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Stream insertion operator.</summary>
	///
	/// <param name="value">The value.</param>
	///
	/// <returns>A reference to this object.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	tsStreamWriter &operator<< (unsigned long value);
#endif
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Stream insertion operator.</summary>
	///
	/// <param name="value">The value.</param>
	///
	/// <returns>A reference to this object.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	tsStreamWriter &operator<< (int8_t value);
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Stream insertion operator.</summary>
	///
	/// <param name="value">The value.</param>
	///
	/// <returns>A reference to this object.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	tsStreamWriter &operator<< (int64_t value);
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Stream insertion operator.</summary>
	///
	/// <param name="value">The value.</param>
	///
	/// <returns>A reference to this object.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	tsStreamWriter &operator<< (uint64_t value);
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Stream insertion operator.</summary>
	///
	/// <param name="value">The value.</param>
	///
	/// <returns>A reference to this object.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	tsStreamWriter &operator<< (double value);
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Stream insertion operator.</summary>
	///
	/// <param name="value">The value.</param>
	///
	/// <returns>A reference to this object.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	tsStreamWriter &operator<< (const tscrypto::tsCryptoData &value);
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Stream insertion operator.</summary>
	///
	/// <param name="value">The value.</param>
	///
	/// <returns>A reference to this object.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	//tsStreamWriter &operator<< (const wchar_t *value);
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Stream insertion operator.</summary>
	///
	/// <param name="value">The value.</param>
	///
	/// <returns>A reference to this object.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	tsStreamWriter &operator<< (const char *value);
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	///// <summary>Stream insertion operator.</summary>
	/////
	///// <param name="value">The value.</param>
	/////
	///// <returns>A reference to this object.</returns>
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	//tsStreamWriter &operator<< (void *value);
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	///// <summary>Stream insertion operator.</summary>
	/////
	///// <param name="value">The value.</param>
	/////
	///// <returns>A reference to this object.</returns>
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	//tsStreamWriter &operator<< (const void *value);
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Stream insertion operator.</summary>
	///
	/// <param name="_Pfn">Runs the specified function on this object</param>
	///
	/// <returns>A reference to this object.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual tsStreamWriter &operator<<(tsStreamWriter &(*_Pfn)(tsStreamWriter &obj));
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Stream insertion operator.</summary>
	///
	/// <param name="_Manip">Holds the function pointer and argument that is to be run.</param>
	///
	/// <returns>A reference to this object.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	template <class _Arg>
	tsStreamWriter& operator<<(const _TSStreamWritermanip<_Arg>& _Manip)
	{
		(this->*_Manip._Pfun)(_Manip._Manarg);
		return *this;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Increment the indentation level</summary>
	///
	/// <returns>A reference to this object.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual tsStreamWriter &indent();
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Decrements the indentation level</summary>
	///
	/// <returns>A reference to this object.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual tsStreamWriter &outdent();
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Sets a prefix string for the following line</summary>
	///
	/// <param name="prfx">The prefix string.</param>
	///
	/// <returns>A reference to this object.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual tsStreamWriter &setPrefix(const tscrypto::tsCryptoString& prfx);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Sets float precision for the next stream operator.</summary>
	///
	/// <param name="left"> The number of digits to the left.</param>
	/// <param name="right">The number of digits to the right.</param>
	///
	/// <returns>A reference to this object.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual tsStreamWriter &SetFloatPrecision(int left, int right);
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Sets the padding width for the next stream operator.</summary>
	///
	/// <param name="setTo">The width.</param>
	///
	/// <returns>A reference to this object.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual tsStreamWriter &SetWidth(int setTo);
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Sets the filler character for the next stream operator</summary>
	///
	/// <param name="_filler">The filler.</param>
	///
	/// <returns>A reference to this object.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual tsStreamWriter &SetFiller(char _filler);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Sets the number base to use when converting the next integer using the stream
	/// 		 operator.</summary>
	///
	/// <param name="numbase">The base of the number (10, 16, ...).</param>
	///
	/// <returns>A reference to this object.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual tsStreamWriter &setbase(int numbase);
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Set the number base to 16 for HEX output</summary>
	///
	/// <returns>A reference to this object.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual tsStreamWriter &hex() { return setbase(16); }
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Set the number base to 10 for decimal output</summary>
	///
	/// <returns>A reference to this object.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual tsStreamWriter &dec() { return setbase(10); }
	//   ////////////////////////////////////////////////////////////////////////////////////////////////////
	//   /// <summary>Set the output formatting for pointers</summary>
	//   ///
	//   /// <returns>A reference to this object.</returns>
	//   ////////////////////////////////////////////////////////////////////////////////////////////////////
	//tsStreamWriter &ptr() { setbase(16);SetFiller('0'); return SetWidth(sizeof(void*)); }
	//   ////////////////////////////////////////////////////////////////////////////////////////////////////
	//   /// <summary>Restores the output formatting for non-pointers</summary>
	//   ///
	//   /// <returns>A reference to this object.</returns>
	//   ////////////////////////////////////////////////////////////////////////////////////////////////////
	//tsStreamWriter &noptr() { setbase(10);SetFiller(' '); return SetWidth(0); }
	virtual tsStreamWriter &ptr(const void *pointer);

	template <typename TODUMP>
	tsStreamWriter &hexDump(TODUMP& data)
	{
		tscrypto::tsCryptoData tmp(data);

		return hexDump(tmp);
	}

	tsStreamWriter &hexDump(tscrypto::tsCryptoData& data);

protected:
	int leftDoublePrecision;
	int rightDoublePrecision;
	bool justHadNewline;
	tscrypto::tsCryptoString prefix;
	int numberBase;
	int width;
	char filler;
	tscrypto::tsCryptoString _partialLine;
	std::shared_ptr<IDataWriter> _writer;
	int _indentLevel;

	void processData(tscrypto::tsCryptoString &data);
	void resetSingleOps();
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>A new line for the Trace logging class</summary>
///
/// <param name="strm">[in,out] The strm.</param>
///
/// <returns>A reference to this object.</returns>
////////////////////////////////////////////////////////////////////////////////////////////////////
inline tsStreamWriter &endl(tsStreamWriter &strm)
{
	strm << "\n";
	return strm;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>Helper function to indent the following lines in the log</summary>
///
/// <param name="strm">[in,out] The strm.</param>
///
/// <returns>A reference to this object.</returns>
////////////////////////////////////////////////////////////////////////////////////////////////////
inline tsStreamWriter &indent(tsStreamWriter &strm)
{
	strm.indent();
	return strm;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>Helper function to outdent the following lines in the log</summary>
///
/// <param name="strm">[in,out] The strm.</param>
///
/// <returns>A reference to this object.</returns>
////////////////////////////////////////////////////////////////////////////////////////////////////
inline tsStreamWriter &outdent(tsStreamWriter &strm)
{
	strm.outdent();
	return strm;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>Helper function to put the stream into HEX mode</summary>
///
/// <param name="strm">[in,out] The strm.</param>
///
/// <returns>A reference to this object.</returns>
////////////////////////////////////////////////////////////////////////////////////////////////////
inline tsStreamWriter &hex(tsStreamWriter &strm)
{
	strm.hex();
	return strm;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>Helper function to put the string into Decimal mode</summary>
///
/// <param name="strm">[in,out] The strm.</param>
///
/// <returns>A reference to this object.</returns>
////////////////////////////////////////////////////////////////////////////////////////////////////
inline tsStreamWriter &dec(tsStreamWriter &strm)
{
	strm.dec();
	return strm;
}

namespace TSStream {
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Helper function to set the number base for this stream</summary>
	///
	/// <param name="setTo">[in,out].</param>
	///
	/// <returns>A reference to this object.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	inline _TSStreamWritermanip<int> __cdecl width(int setTo)
	{
		return _TSStreamWritermanip<int>(&tsStreamWriter::SetWidth, setTo);
	}
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Helper function to set the number base for this stream</summary>
	///
	/// <param name="setTo">[in,out].</param>
	///
	/// <returns>A reference to this object.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	inline _TSStreamWritermanip<int> __cdecl setbase(int setTo)
	{
		return _TSStreamWritermanip<int>(&tsStreamWriter::setbase, setTo);
	}
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Helper function to set the filler character for this stream</summary>
	///
	/// <param name="setTo">[in,out].</param>
	///
	/// <returns>A reference to this object.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	inline _TSStreamWritermanip<char> __cdecl filler(char setTo)
	{
		return _TSStreamWritermanip<char>(&tsStreamWriter::SetFiller, setTo);
	}
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Helper function to set pointer mode</summary>
	///
	/// <param name="pointer">[in,out].</param>
	///
	/// <returns>A reference to this object.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	inline _TSStreamWritermanip<const void *> __cdecl ptr(const void *pointer)
	{
		return _TSStreamWritermanip<const void *>(&tsStreamWriter::ptr, pointer);
	}

	template <typename TODUMP>
	inline _TSStreamWritermanip<TODUMP &> __cdecl hexDump(TODUMP& data)
	{
		return _TSStreamWritermanip<TODUMP&>(&tsStreamWriter::hexDump, data);
	}
}

#endif // __CKMFILEWRITER_H__

