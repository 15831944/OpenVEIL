//	Copyright (c) 2018, TecSec, Inc.
//
//	Redistribution and use in source and binary forms, with or without
//	modification, are permitted provided that the following conditions are met:
//	
//		* Redistributions of source code must retain the above copyright
//		  notice, this list of conditions and the following disclaimer.
//		* Redistributions in binary form must reproduce the above copyright
//		  notice, this list of conditions and the following disclaimer in the
//		  documentation and/or other materials provided with the distribution.
//		* Neither the name of TecSec nor the names of the contributors may be
//		  used to endorse or promote products derived from this software 
//		  without specific prior written permission.
//		 
//	ALTERNATIVELY, provided that this notice is retained in full, this product
//	may be distributed under the terms of the GNU General Public License (GPL),
//	in which case the provisions of the GPL apply INSTEAD OF those given above.
//		 
//	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
//	ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//	DISCLAIMED.  IN NO EVENT SHALL TECSEC BE LIABLE FOR ANY 
//	DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//	LOSS OF USE, DATA OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//	ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Written by Roger Butler

//
// GENERATED CODE
//
#ifndef __COMPILERCONFIG_H__
#define __COMPILERCONFIG_H__

#pragma once

#define TS_INLINE @TS_INLINE@

#cmakedefine MSYS 1
#cmakedefine MINGW 1
#cmakedefine ANDROID 1

#cmakedefine HAVE_SMARTCARD 1
#cmakedefine HAVE_CONSTEXPR 1

#ifdef _WIN32
    #include <winsock2.h>
#endif

#ifdef __APPLE__
#   include "CyberVEIL/CyberVEIL.h"
#else
#   include "CyberVEIL.h"
#endif


#include <initializer_list>
#include <vector>
#include <list>
#include <memory>
#include <deque>
#include <functional>
#include <algorithm>
#include <iostream>

#ifdef _WIN32
    #include <windows.h>
    #include <Ws2tcpip.h>
    #include <time.h>
	#define HAVE_SAL_H 1
    #define HAVE_BSTR 1
    #define HAVE_WINDOWS_H 1
    #define HAVE_GETS_S 1
#endif

#ifdef __GNUC__
	#define DEPRECATED __attribute__((deprecated))
	#if ((__GNUC__ * 100) + __GNUC_MINOR__) >= 402
		#define GCC_DIAG_STR(s) #s
		#define GCC_DIAG_JOINSTR(x,y) GCC_DIAG_STR(x ## y)
		#define GCC_DIAG_DO_PRAGMA(x) _Pragma (#x)
		#define GCC_DIAG_PRAGMA(x) GCC_DIAG_DO_PRAGMA(GCC diagnostic x)
		
		#if ((__GNUC__ * 100) + __GNUC_MINOR__) >= 406
			#define GCC_DIAG_OFF(x) GCC_DIAG_PRAGMA(push) GCC_DIAG_PRAGMA(ignored GCC_DIAG_JOINSTR(-W,x))
			#define GCC_DIAG_ON(x) GCC_DIAG_PRAGMA(pop)
		#else
			#define GCC_DIAG_OFF(x) GCC_DIAG_PRAGMA(ignored GCC_DIAG_JOINSTR(-W,x))
			#define GCC_DIAG_ON(x)  GCC_DIAG_PRAGMA(warning GCC_DIAG_JOINSTR(-W,x))
		#endif
	#else
		#define GCC_DIAG_OFF(x)
		#define GCC_DIAG_ON(x)
	#endif
	#define PUSH_WARNINGS GCC_DIAG_DO_PRAGMA(GCC diagnostic push)
	#define POP_WARNINGS GCC_DIAG_DO_PRAGMA(GCC diagnostic pop)
	#define IGNORE_WARNING(a) GCC_DIAG_OFF(a)
	#define TS_DEPRECATED_WARNING deprecated-declarations
#elif defined(_MSC_VER)
	#define DEPRECATED __declspec(deprecated)
	#define PUSH_WARNINGS __pragma(warning(push))
	#define POP_WARNINGS __pragma(warning(pop))
	#define IGNORE_WARNING(a) __pragma(warning(disable:a))
	#define TS_DEPRECATED_WARNING 4996
#else
	#pragma warning("WARNING:  You need to implement DEPRECATED for this compiler")
	#define DEPRECATED
#endif

#ifdef HAVE_SAL_H
#   include <sal.h>
//#   include <CodeAnalysis\sourceannotations.h>
    #ifdef __GNUC__
        #ifndef _When_
            #define _When_(a)
        #endif
        #ifndef _Acquires_lock_
            #define _Acquires_lock_(a)
        #endif
        #ifndef _Releases_lock_
            #define _Releases_lock_(a)
        #endif
        #ifndef _On_failure_
            #define _On_failure_(a)
        #endif
        #ifndef _Raises_SEH_exception_
            #define _Raises_SEH_exception_(a)
        #endif
        #ifndef _Success_
            #define _Success_(a)
        #endif
        #ifndef _Post_satisfies_
            #define _Post_satisfies_(a)
        #endif
        #ifndef _Out_writes_bytes_
            #define _Out_writes_bytes_(a)
        #endif
        #ifndef _In_
            #define _In_
        #endif
        #ifndef _Inout_
            #define _Inout_
        #endif
        #ifndef _Out_
            #define _Out_
        #endif
        #ifndef _Check_return_
            #define _Check_return_
        #endif
    #endif
#else // HAVE_SAL_H
#   define _When_(a)
#   define _Acquires_lock_(a)
#   define _Releases_lock_(a)
#   define _On_failure_(a) 
#   define _Raises_SEH_exception_
#   define _Success_(a)
#   define _Post_satisfies_(a)
#   define _Out_writes_bytes_(a)
#   define _In_
#   define _Inout_
#   define _Out_
#   define _Check_return_
#   define IN
#   define OUT
#endif // HAVE_SAL_H

#endif // __COMPILERCONFIG_H__
