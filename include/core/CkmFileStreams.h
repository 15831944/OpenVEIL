//	Copyright (c) 2016, TecSec, Inc.
//
//	Redistribution and use in source and binary forms, with or without
//	modification, are permitted provided that the following conditions are met:
//	
//		* Redistributions of source code must retain the above copyright
//		  notice, this list of conditions and the following disclaimer.
//		* Redistributions in binary form must reproduce the above copyright
//		  notice, this list of conditions and the following disclaimer in the
//		  documentation and/or other materials provided with the distribution.
//		* Neither the name of TecSec nor the names of the contributors may be
//		  used to endorse or promote products derived from this software 
//		  without specific prior written permission.
//		 
//	ALTERNATIVELY, provided that this notice is retained in full, this product
//	may be distributed under the terms of the GNU General Public License (GPL),
//	in which case the provisions of the GPL apply INSTEAD OF those given above.
//		 
//	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
//	ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//	DISCLAIMED.  IN NO EVENT SHALL TECSEC BE LIABLE FOR ANY 
//	DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//	LOSS OF USE, DATA OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//	ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Written by Roger Butler

//////////////////////////////////////////////////////////////////////////////////
/// \file CkmFileStreams.h
/// \brief Contains the CKM File stream interfaces.
//////////////////////////////////////////////////////////////////////////////////

#ifndef __CKMFILESTREAMS_H__
#define __CKMFILESTREAMS_H__

#pragma once

typedef enum { wait_false, wait_true, wait_pending } WaitableBool;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>Defines an interface that allows for object persistance to a byte array.</summary>
////////////////////////////////////////////////////////////////////////////////////////////////////
class VEILCORE_API ICkmPersistable
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Converts this object to a byte array.</summary>
    ///
    /// <returns>This object as a tscrypto::tsCryptoData.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual tscrypto::tsCryptoData ToBytes() = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Initializes this object from the given byte array.</summary>
    ///
    /// <param name="setTo">The persistance data.</param>
    ///
    /// <returns>true if it succeeds, false if it fails.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool FromBytes(const tscrypto::tsCryptoData &setTo) = 0;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>Defines an interface that allows for object persistance to a JSON string.</summary>
////////////////////////////////////////////////////////////////////////////////////////////////////
class VEILCORE_API ICkmJsonPersistable
{
public:
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Converts this object to a JSON string.</summary>
	///
	/// <returns>This object as a tscrypto::tsCryptoString.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual tscrypto::tsCryptoString ToJSON() = 0;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Initializes this object from the given JSON string.</summary>
	///
	/// <param name="setTo">The persistance data.</param>
	///
	/// <returns>true if it succeeds, false if it fails.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual bool FromJSON(const tscrypto::tsCryptoString &setTo) = 0;
};

/// <summary>Interface that defines a the common stream functions for the CKM system.</summary>
class VEILCORE_API IDataIOBase
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Query if this object is valid.</summary>
    ///
    /// <returns>true if valid, false if not.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool IsValid() const = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Determines if we allow random access.</summary>
    ///
    /// <returns>true if it succeeds, false if it fails.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool AllowsRandomAccess() const = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Query if this object is at the end of the stream.</summary>
    ///
    /// <returns>true if end of file, false if not.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool IsEndOfFile() const = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Determines if we can know the remaining data.</summary>
    ///
    /// <returns>true if it succeeds, false if it fails.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool KnowsRemainingData() const = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Gets the remaining data.</summary>
    ///
    /// <returns>the remaining data.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual int64_t RemainingData() const = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Gets the data length.</summary>
    ///
    /// <returns>.the data length.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual int64_t DataLength() const = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Gets the current position.</summary>
    ///
    /// <returns>the current position.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual int64_t CurrentPosition() const = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Gets the name for this stream.</summary>
    ///
    /// <returns>the name for this stream.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual tscrypto::tsCryptoString DataName() const = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Sets the name for this stream.</summary>
    ///
    /// <param name="setTo">the name for this stream.</param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void SetDataName(const tscrypto::tsCryptoString& setTo) = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Moves the current position for this stream.</summary>
    ///
    /// <param name="setTo">The desired position.</param>
    ///
    /// <returns>true if it succeeds, false if it fails.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool GoToPosition(int64_t setTo) = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Moves the current position for this stream.</summary>
    ///
    /// <param name="origin">  The origin. 0 - from beginning, 1 - from current position, 2 - from end of stream</param>
    /// <param name="position">The offset to move.</param>
    ///
    /// <returns>The new stream position.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual int64_t Seek(int origin, int64_t position) = 0;

    /// <summary>Closes this stream.</summary>
    virtual void Close() = 0;
};

/// <summary>Interface that defines a data reader for the CKM system.</summary>
class VEILCORE_API IDataReader
{
public:
	// From IDataIOBase
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Query if this object is valid.</summary>
	///
	/// <returns>true if valid, false if not.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual bool IsValid() const = 0;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Determines if we allow random access.</summary>
	///
	/// <returns>true if it succeeds, false if it fails.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual bool AllowsRandomAccess() const = 0;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Query if this object is at the end of the stream.</summary>
	///
	/// <returns>true if end of file, false if not.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual bool IsEndOfFile() const = 0;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Determines if we can know the remaining data.</summary>
	///
	/// <returns>true if it succeeds, false if it fails.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual bool KnowsRemainingData() const = 0;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Gets the remaining data.</summary>
	///
	/// <returns>the remaining data.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual int64_t RemainingData() const = 0;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Gets the data length.</summary>
	///
	/// <returns>.the data length.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual int64_t DataLength() const = 0;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Gets the current position.</summary>
	///
	/// <returns>the current position.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual int64_t CurrentPosition() const = 0;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Gets the name for this stream.</summary>
	///
	/// <returns>the name for this stream.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual tscrypto::tsCryptoString DataName() const = 0;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Sets the name for this stream.</summary>
	///
	/// <param name="setTo">the name for this stream.</param>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual void SetDataName(const tscrypto::tsCryptoString& setTo) = 0;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Moves the current position for this stream.</summary>
	///
	/// <param name="setTo">The desired position.</param>
	///
	/// <returns>true if it succeeds, false if it fails.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual bool GoToPosition(int64_t setTo) = 0;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Moves the current position for this stream.</summary>
	///
	/// <param name="origin">  The origin. 0 - from beginning, 1 - from current position, 2 - from end of stream</param>
	/// <param name="position">The offset to move.</param>
	///
	/// <returns>The new stream position.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual int64_t Seek(int origin, int64_t position) = 0;

	/// <summary>Closes this stream.</summary>
	virtual void Close() = 0;


	// Added functions

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Reads data and puts it into a tscrypto::tsCryptoData.</summary>
    ///
    /// <param name="byteCount">Number of bytes to read.</param>
    /// <param name="data">		[in,out] The data.</param>
    ///
    /// <returns>true if it succeeds, false if it fails.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool ReadData(int byteCount, tscrypto::tsCryptoData &data) = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Reads data and puts it into a tscrypto::tsCryptoData at the indicated offset.</summary>
    ///
    /// <param name="byteCount"> Number of bytes to read.</param>
    /// <param name="dataOffset">The offset within the destination to put the data.</param>
    /// <param name="data">		 [in,out] The data destination.</param>
    ///
    /// <returns>The number of bytes read.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual int  ReadData(int byteCount, int dataOffset, tscrypto::tsCryptoData &data) = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Read data from the stream but do not remove the data.</summary>
    ///
    /// <param name="byteCount">Number of bytes to peek.</param>
    /// <param name="data">		[in,out] The data destination.</param>
    ///
    /// <returns>true if it succeeds, false if it fails.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool PeekData(int byteCount, tscrypto::tsCryptoData &data) = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Read data from the stream but do not remove the data.</summary>
    ///
    /// <param name="byteCount"> Number of bytes to peek.</param>
    /// <param name="dataOffset">The offset within the destination to put the data.</param>
    /// <param name="data">		 [in,out] The data destination.</param>
    ///
    /// <returns>The number of bytes read.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual int  PeekData(int byteCount, int dataOffset, tscrypto::tsCryptoData &data) = 0;
};

/// <summary>Interface that defines a data writer for the CKM system.</summary>
class VEILCORE_API IDataWriter
{
public:
	// From IDataIOBase
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Query if this object is valid.</summary>
	///
	/// <returns>true if valid, false if not.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual bool IsValid() const = 0;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Determines if we allow random access.</summary>
	///
	/// <returns>true if it succeeds, false if it fails.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual bool AllowsRandomAccess() const = 0;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Query if this object is at the end of the stream.</summary>
	///
	/// <returns>true if end of file, false if not.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual bool IsEndOfFile() const = 0;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Determines if we can know the remaining data.</summary>
	///
	/// <returns>true if it succeeds, false if it fails.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual bool KnowsRemainingData() const = 0;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Gets the remaining data.</summary>
	///
	/// <returns>the remaining data.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual int64_t RemainingData() const = 0;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Gets the data length.</summary>
	///
	/// <returns>.the data length.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual int64_t DataLength() const = 0;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Gets the current position.</summary>
	///
	/// <returns>the current position.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual int64_t CurrentPosition() const = 0;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Gets the name for this stream.</summary>
	///
	/// <returns>the name for this stream.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual tscrypto::tsCryptoString DataName() const = 0;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Sets the name for this stream.</summary>
	///
	/// <param name="setTo">the name for this stream.</param>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual void SetDataName(const tscrypto::tsCryptoString& setTo) = 0;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Moves the current position for this stream.</summary>
	///
	/// <param name="setTo">The desired position.</param>
	///
	/// <returns>true if it succeeds, false if it fails.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual bool GoToPosition(int64_t setTo) = 0;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Moves the current position for this stream.</summary>
	///
	/// <param name="origin">  The origin. 0 - from beginning, 1 - from current position, 2 - from end of stream</param>
	/// <param name="position">The offset to move.</param>
	///
	/// <returns>The new stream position.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual int64_t Seek(int origin, int64_t position) = 0;

	/// <summary>Closes this stream.</summary>
	virtual void Close() = 0;


	// Added functions

	////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Writes data to the stream.</summary>
    ///
    /// <param name="data">The data to write.</param>
    ///
    /// <returns>true if it succeeds, false if it fails.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool WriteData(const tscrypto::tsCryptoData &data) = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Writes data to the stream.</summary>
    ///
    /// <param name="data">  The data to write.</param>
    /// <param name="offset">The offset of the first byte to write.</param>
    /// <param name="length">The length of the data to write.</param>
    ///
    /// <returns>true if it succeeds, false if it fails.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool WriteData(const tscrypto::tsCryptoData &data, int offset, int length) = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Flushes the stream data to its final media.</summary>
    ///
    /// <returns>true if it succeeds, false if it fails.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool Flush() = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Truncates this object at the current position.</summary>
    ///
    /// <returns>true if it succeeds, false if it fails.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool Truncate() = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Sets the file size.</summary>
    ///
    /// <param name="setTo">The desired file size.</param>
    ///
    /// <returns>true if it succeeds, false if it fails.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool SetFileSize(int64_t setTo) = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Determine if we can prepend data to the stream.</summary>
    ///
    /// <returns>true if we can prepend, false if not.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool CanPrepend() const = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Prepends data to this stream.</summary>
    ///
    /// <param name="data">The data to prepend.</param>
    ///
    /// <returns>true if it succeeds, false if it fails.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool Prepend(const tscrypto::tsCryptoData &data) = 0;
};

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4231)
#pragma warning(disable:4251)
VEILCORE_TEMPLATE_EXTERN template class VEILCORE_API std::shared_ptr<IDataWriter>;
#pragma warning(pop)
#endif // _MSC_VER

class IFifoStream;

/// <summary>Callback interface for the First In First Out stream reader.</summary>
class VEILCORE_API IFifoStreamReaderCallback
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Called by the stream when data is available</summary>
    ///
    /// <param name="fifo">[in] The FIFO stream.</param>
    ///
    /// <returns>S_OK for success or a standard COM error for failure.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual bool DataAvailable(std::shared_ptr<IFifoStream> fifo) = 0;
};

/// <summary>Callback interface for the First In First Out stream writer.</summary>
class VEILCORE_API IFifoStreamWriterCallback
{
public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Called by the wtream writer to indicate that data is needed.</summary>
    ///
    /// <param name="fifo">[in The FIFO stream.</param>
    ///
    /// <returns>S_OK for success or a standard COM error for failure.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual bool ProduceData(std::shared_ptr<IFifoStream> fifo) = 0;
};

class VEILCORE_API IFifoStream
{
public: // APPPLATFORM_EXPORT
	// From IDataIOBase
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Query if this object is valid.</summary>
	///
	/// <returns>true if valid, false if not.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual bool IsValid() const = 0;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Determines if we allow random access.</summary>
	///
	/// <returns>true if it succeeds, false if it fails.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual bool AllowsRandomAccess() const = 0;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Query if this object is at the end of the stream.</summary>
	///
	/// <returns>true if end of file, false if not.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual bool IsEndOfFile() const = 0;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Determines if we can know the remaining data.</summary>
	///
	/// <returns>true if it succeeds, false if it fails.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual bool KnowsRemainingData() const = 0;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Gets the remaining data.</summary>
	///
	/// <returns>the remaining data.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual int64_t RemainingData() const = 0;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Gets the data length.</summary>
	///
	/// <returns>.the data length.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual int64_t DataLength() const = 0;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Gets the current position.</summary>
	///
	/// <returns>the current position.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual int64_t CurrentPosition() const = 0;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Gets the name for this stream.</summary>
	///
	/// <returns>the name for this stream.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual tscrypto::tsCryptoString DataName() const = 0;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Sets the name for this stream.</summary>
	///
	/// <param name="setTo">the name for this stream.</param>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual void SetDataName(const tscrypto::tsCryptoString& setTo) = 0;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Moves the current position for this stream.</summary>
	///
	/// <param name="setTo">The desired position.</param>
	///
	/// <returns>true if it succeeds, false if it fails.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual bool GoToPosition(int64_t setTo) = 0;
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>Moves the current position for this stream.</summary>
	///
	/// <param name="origin">  The origin. 0 - from beginning, 1 - from current position, 2 - from end of stream</param>
	/// <param name="position">The offset to move.</param>
	///
	/// <returns>The new stream position.</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual int64_t Seek(int origin, int64_t position) = 0;

	/// <summary>Closes this stream.</summary>
	virtual void Close() = 0;


	// Added functions

	// ICkmDataReader
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Reads data and puts it into a tscrypto::tsCryptoData.</summary>
    ///
    /// <param name="byteCount">Number of bytes to read.</param>
    /// <param name="data">		[in,out] The data.</param>
    ///
    /// <returns>true if it succeeds, false if it fails.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool ReadData(int byteCount, tscrypto::tsCryptoData &data) = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Reads data and puts it into a tscrypto::tsCryptoData at the indicated offset.</summary>
    ///
    /// <param name="byteCount"> Number of bytes to read.</param>
    /// <param name="dataOffset">The offset within the destination to put the data.</param>
    /// <param name="data">		 [in,out] The data destination.</param>
    ///
    /// <returns>The number of bytes read.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual int  ReadData(int byteCount, int dataOffset, tscrypto::tsCryptoData &data) = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Read data from the stream but do not remove the data.</summary>
    ///
    /// <param name="byteCount">Number of bytes to peek.</param>
    /// <param name="data">		[in,out] The data destination.</param>
    ///
    /// <returns>true if it succeeds, false if it fails.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool PeekData(int byteCount, tscrypto::tsCryptoData &data) = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Read data from the stream but do not remove the data.</summary>
    ///
    /// <param name="byteCount"> Number of bytes to peek.</param>
    /// <param name="dataOffset">The offset within the destination to put the data.</param>
    /// <param name="data">		 [in,out] The data destination.</param>
    ///
    /// <returns>The number of bytes read.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual int  PeekData(int byteCount, int dataOffset, tscrypto::tsCryptoData &data) = 0;

    // ICkmDataWriter
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Writes data to the stream.</summary>
    ///
    /// <param name="data">The data to write.</param>
    ///
    /// <returns>true if it succeeds, false if it fails.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool WriteData(const tscrypto::tsCryptoData &data) = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Writes data to the stream.</summary>
    ///
    /// <param name="data">  The data to write.</param>
    /// <param name="offset">The offset of the first byte to write.</param>
    /// <param name="length">The length of the data to write.</param>
    ///
    /// <returns>true if it succeeds, false if it fails.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool WriteData(const tscrypto::tsCryptoData &data, int offset, int length) = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Flushes the stream data to its final media.</summary>
    ///
    /// <returns>true if it succeeds, false if it fails.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool Flush() = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Truncates this object at the current position.</summary>
    ///
    /// <returns>true if it succeeds, false if it fails.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool Truncate() = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Sets the file size.</summary>
    ///
    /// <param name="setTo">The desired file size.</param>
    ///
    /// <returns>true if it succeeds, false if it fails.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool SetFileSize(int64_t setTo) = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Determine if we can prepend data to the stream.</summary>
    ///
    /// <returns>true if we can prepend, false if not.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool CanPrepend() const = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Prepends data to this stream.</summary>
    ///
    /// <param name="data">The data to prepend.</param>
    ///
    /// <returns>true if it succeeds, false if it fails.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool Prepend(const tscrypto::tsCryptoData &data) = 0;

    // ICkmFifoStream

    /// <summary>FIFO data source has put all data into this stream.</summary>
    virtual void WriterDone() = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>The FIFO stream reader is established using this call.</summary>
    ///
    /// <param name="setTo">[in] The callback interface.</param>
    ///
    /// <returns>S_OK for success or a standard COM error for failure.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual bool SetReaderCallback(std::shared_ptr<IFifoStreamReaderCallback> setTo) = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>The FIFO stream writer is established using this call.</summary>
    ///
    /// <param name="setTo">[in] The callback interface.</param>
    ///
    /// <returns>S_OK for success or a standard COM error for failure.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual bool SetWriterCallback(std::shared_ptr<IFifoStreamWriterCallback> setTo) = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Starts a processing loop to take all the data from the writer and process it.</summary>
    ///
    /// <returns>S_OK for success or a standard COM error for failure.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
	virtual bool ProcessAllData() = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Query if this object the data source is finished.</summary>
    ///
    /// <returns>true if writer finished, false if not.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool IsWriterFinished() const = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Prepend data to the FIFO buffer.</summary>
    ///
    /// <param name="data">The data to prepend.</param>
    ///
    /// <returns>true if it succeeds, false if it fails.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool UnreadData(const tscrypto::tsCryptoData &data) = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Prepend data to the FIFO buffer.</summary>
    ///
    /// <param name="data">  The data to prepend.</param>
    /// <param name="offset">The offset to the first byte.</param>
    /// <param name="length">The number of bytes to prepend.</param>
    ///
    /// <returns>true if it succeeds, false if it fails.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool UnreadData(const tscrypto::tsCryptoData &data, int offset, int length) = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Appends data to the FIFO buffer and calls WriterDone</summary>
    ///
    /// <param name="data">The data to append.</param>
    ///
    /// <returns>true if it succeeds, false if it fails.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool WriteDataAndFinish(const tscrypto::tsCryptoData &data) = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Appends data to the FIFO buffer and calls WriterDone.</summary>
    ///
    /// <param name="data">  The data to append.</param>
    /// <param name="offset">The offset to the first byte.</param>
    /// <param name="length">The number of bytes to prepend.</param>
    ///
    /// <returns>true if it succeeds, false if it fails.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual bool WriteDataAndFinish(const tscrypto::tsCryptoData &data, int offset, int length) = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Gets the number of bytes read from the FIFO stream.</summary>
    ///
    /// <returns>the number of bytes read from the FIFO stream.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual int64_t BytesRead() = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Gets the number of bytes written into the FIFO stream.</summary>
    ///
    /// <returns>the number of bytes written into the FIFO stream.</returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual int64_t BytesWritten() = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Resets this object for a new data stream.</summary>
    ///
    /// <remarks>This function will reset the number of bytes read, the callbacks are released,
    /// 		 the FIFO data stream is cleared of data and the WriterDone flag is cleared.</remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void Reset() = 0;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>Resets this object for a new data stream.</summary>
    ///
    /// <remarks>This function will reset the number of bytes read, the FIFO data stream is cleared of
    /// data, the WriterDone flag is cleared but the callbacks are not released.</remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    virtual void ResetWriter() = 0;
};

#endif // __CKMFILESTREAMS_H__

